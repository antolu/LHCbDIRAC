###############################################################################
# (c) Copyright 2019 CERN for the benefit of the LHCb Collaboration           #
#                                                                             #
# This software is distributed under the terms of the GNU General Public      #
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".   #
#                                                                             #
# In applying this licence, CERN does not waive the privileges and immunities #
# granted to it by virtue of its status as an Intergovernmental Organization  #
# or submit itself to any jurisdiction.                                       #
###############################################################################
# This gitlab ci tests, deploys and build the docker images
# It performs some operations with an account.
# Its credentials are stored as secret variable KRB_PASSWORD and KRB_USERNAME
variables:
    SANCHA_PATH_DEVEL: "/cvmfs/lhcb.cern.ch/lib/lhcb/LHCBDIRAC/Sencha/ext-4.2.1.883/"
    SANCHA_PATH_PROD: "/cvmfs/lhcb.cern.ch/lib/lhcb/LHCBDIRAC/Sencha/ext-4.2.1.883/"
    LBENV_RELEASE: "1.1.0"
    LBPLATFORMUTILS_RELEASE: "4.1.0"
stages:
   # Run all the tests
  - test
  # deploy the coverage results
  - coverage
  - coverageDfs
  # Release the software on AFS
  - release
  # Build the docker
  - release_docker
  # Tag the devel container if needed
  - tag_container

# Common configuration between pytest and pylint
.test_setup: &test_setup
  image:  gitlab-registry.cern.ch/ci-tools/ci-worker:cc7
  before_script:
    # diracTAG is the DIRAC tag on top of which the latest LHCbDIRAC release is built in releases.cfg
    - diracTAG=$(head -n 50 LHCbDIRAC/releases.cfg | grep -E ' *v' | head -n 3 | tail -n 1 | sed 's/ //g' | cut -d ':' -f 2)
    - echo "Using DIRAC tag $diracTAG"
    - git clone https://github.com/DIRACGrid/DIRAC.git
    - cd DIRAC
    - git checkout $diracTAG
    - cd ..
    - yum install -y openssl mysql mysql-libs mysql-devel make ncurses-devel libcurl-devel
    - export PYCURL_SSL_LIBRARY=openssl
    - pip install --upgrade setuptools
    - pip install --upgrade pip
    - pip install virtualenv
    - virtualenv DIRAC_VENV
    - source DIRAC_VENV/bin/activate
    - pip install --upgrade setuptools
    - pip install --upgrade pip
    - pip list
    - pip install -r DIRAC/requirements.txt
    - pip install LbEnv==$LBENV_RELEASE --trusted-host=lhcb-pypi.web.cern.ch --extra-index-url=https://lhcb-pypi.web.cern.ch/lhcb-pypi/simple --force-reinstall
    - pip install LbPlatformUtils==$LBPLATFORMUTILS_RELEASE --trusted-host=lhcb-pypi.web.cern.ch --extra-index-url=https://lhcb-pypi.web.cern.ch/lhcb-pypi/simple --force-reinstall

  stage: test
  only:
    - branches

# This runs pylint and fails if there are errors
run_pylint:
  <<: *test_setup
  script:
    - cd LHCbDIRAC
    - 'find . -name "*.py" -and -not -name "NotForJenkins_Test_BKK_DB_OracleBookkeepingDB.py" -exec pylint -E --rcfile=$CI_PROJECT_DIR/DIRAC/.pylintrc --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --extension-pkg-whitelist=GSI,numpy {} +'

# This runs pytest and generates the coverage report
run_pytest:
  <<: *test_setup
  script:
    - cd LHCbDIRAC
    - DIRAC_DEPRECATED_FAIL=True pytest . --cov=. --cov-report term-missing --cov-report html --junitxml=pytests.xml
  coverage: '/\d+\%\s*$/'
  artifacts:
    paths:
      - LHCbDIRAC/htmlcov/

# This runs pycodestyle
run_pycodestyle:
  <<: *test_setup
  script:
    - lhcbDiracBranch=$(head -n 50 LHCbDIRAC/releases.cfg | grep -E ' *v' | head -n 1 | grep -qE '(pre|v0r)'; if [ $? -eq 0 ]; then echo "devel"; else echo "master"; fi)
    - git remote add GL https://gitlab.cern.ch/lhcb-dirac/LHCbDIRAC.git
    - git fetch --no-tags GL
    - git branch -avv
    - git diff -U0 GL/${lhcbDiracBranch}...HEAD | pycodestyle --diff

# This ensures the license text is present
# Based on: https://gitlab.cern.ch/lhcb/LHCb/blob/master/.gitlab-ci.yml#L14-18
check-copyright:
  image: gitlab-registry.cern.ch/ci-tools/ci-worker:cc7
  stage: test
  script:
    - curl -o lb-check-copyright "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/SourceTools.py?inline=false"
    - python lb-check-copyright origin/devel

# This job MUST be call pages as per https://docs.gitlab.com/ce/ci/yaml/README.html#pages
pages:
  stage: coverage
  dependencies:
    - run_pytest
  script:
    - TARGET_DIR="public/${CI_COMMIT_REF_NAME}"
    - if [ ! -d "$TARGET_DIR" ]; then mkdir -p $TARGET_DIR; fi
    - echo "Copying into $TARGET_DIR"
    - mv LHCbDIRAC/htmlcov/* $TARGET_DIR
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master@lhcb-dirac/LHCbDIRAC
    - devel@lhcb-dirac/LHCbDIRAC

# Deploy the pages generated to DFS
dfsdeploy:
  # Executed during the deploy stage
  stage: coverageDfs
  # # Only when the master branch is pushed
  only:
    - master
    - devel
  # Custom docker image providing the needed tools to deploy in DFS
  image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
  script:
  # Script that performs the deploy to DFS. Makes use of the variables defined in the project
  # It will not sync the generated content with the folder in DFS (risk of deleting DFS management files)
  # It will just override the contents of DFS or copy new files
  - deploy-dfs
  # do not run any globally defined before_script or after_script for this step
  before_script: []
  after_script: []



# This creates and deploy the tarball on AFS
# It is triggered with a tag only
create_tarball:
  before_script:
    # Fetch a Kerberos token
    - echo "${KRB_PASSWORD}" | kinit ${KRB_USERNAME}@CERN.CH
    # Get the group_login to be able to use lb-run
    - source /cvmfs/lhcb.cern.ch/group_login.sh
    # Configure ssh to use kerberos
    - mkdir /root/.ssh
    - echo -e  "PreferredAuthentications=gssapi-with-mic\nStrictHostKeyChecking=no\nHost lxplus*\n\tForwardX11Trusted yes\n\tGSSAPITrustDns yes\n\tGSSAPIDelegateCredentials yes\n\tGSSAPIAuthentication yes\n" > /root/.ssh/config
    # Configure git to use kerberos
    - git config --global http.emptyAuth true
    # java is required by Sencha Cmd
    - yum install -y java
    # Sencha Cmd is deployed to cvmfs
    - export PATH=/cvmfs/lhcb.cern.ch/lib/lhcb/LHCBDIRAC/Sencha/Cmd:$PATH
  stage: release
  tags:
    # We need a runner with CVMFS
    - cvmfs
  only:
    - tags@lhcb-dirac/LHCbDIRAC
  script:

    # Choose from which branch we should get the releases.cfg file
    # We take it from devel if it is a pre release, otherwise master
    - BRANCH=$(echo $CI_COMMIT_TAG | grep -qE '(pre|^v0r)'; if [ $? -eq 0 ]; then echo "devel"; else echo "master"; fi)
    # Get the releases.cfg from the devel branch
    - curl -L https://gitlab.cern.ch/lhcb-dirac/LHCbDIRAC/raw/$BRANCH/LHCbDIRAC/releases.cfg > releases.cfg
    # This is how it was originaly retrieved....
    #- git archive --remote  ${CI_PROJECT_DIR} origin/devel LHCbDIRAC/releases.cfg  | tar -x -v -f - --transform 's|^LHCbDIRAC/||' LHCbDIRAC/releases.cfg
    # use the kerberos gitlab auth rather than ssh
    - sed 's/ssh:\/\/git@gitlab.cern.ch:7999/https:\/\/:@gitlab.cern.ch:8443/g' -i releases.cfg
    # Identify extjs path based on the barnch
    - SANCHA_PATH=$(if [ $BRANCH == "devel" ]; then echo $SANCHA_PATH_DEVEL; else echo $SANCHA_PATH_PROD; fi)
    # Create the release tarball
    # The last line output by the script is the command to run in order to deploy
    - lb-run LHCbDIRAC/prod dirac-distribution -r ${CI_COMMIT_TAG} -l LHCb -C file:///$(pwd)/releases.cfg --extjspath=${SANCHA_PATH} | tail -n 1  > /tmp/deploy.sh
    # Use the proper user
    - export USER=${KRB_USERNAME}
   #  # FIXME: this is the wrong path, but is used as a test
   #  - sed 's/\/afs\/cern.ch\/lhcb\/distribution\/LHCbDirac_project/\/afs\/cern.ch\/user\/l\/lbmesos/g' -i /tmp/deploy.sh
    # There are not html and pdf file, so the script returns a non 0 code, despite working fine
    - sed 's/\*.pdf \*.html//g' -i /tmp/deploy.sh
    - cat /tmp/deploy.sh
    # Execute the deployment
    - source /tmp/deploy.sh



# When we have a git tag, after creating the tarball, create the docker image
build_docker_image:
  tags:
    - docker-image-build
  stage: release_docker
  only:
    - tags
  # This needs to be there for gitlab
  script: echo ""
  variables:
    TO: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    CONTEXT_DIR: container/lhcbdirac/


# If we are triggering on a pre release,
# tag the docker image we just built as 'devel'
# check https://gitlab.cern.ch/ci-tools/docker-image-tools for the image doc
add_devel_tag:
  image: gitlab-registry.cern.ch/ci-tools/docker-image-tools:add-tag
  stage: tag_container
  script:
  - 'Adding tag...'
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /.*-pre.*/
  variables:
    DOCKER_IMAGE_PATH: $CI_REGISTRY_IMAGE
    OLDTAG: ${CI_COMMIT_TAG}
    NEWTAG: devel
