#!/usr/bin/python

import os, shutil, sys, popen2, getopt, time
import datetime
import commands
import string
from tempfile import mktemp
from DIRACEnvironment import DIRAC
from DIRAC.Core.Utilities.GridCredentials import getDIRACGroup
home = os.environ["HOME"]

debug=0
proxyfile=0

__VERSION__ = 0.1

def printUsage():

  print """
  Syntax: dirac-proxy-info [-help][-f proxyfile][-subject][...]

  Options
    --help, --usage     (-h)   Displays usage
    --version                  Displays version
    --debug             (-d)   Displays debugging output
    --file <proxyfile>  (-f)   Non-standard location of proxy
    """
#    [printoptions]            Prints information about proxy
#    -exists [options]  (-e)   Returns 0 if valid proxy exists, 1 otherwise
#
#    [printoptions]
#        -subject       (-s)   Distinguished name (DN) of subject
#        -issuer        (-i)   DN of issuer (certificate signer)
#        -identity             DN of the identity represented by the proxy
#        -type                 Type of proxy (full or limited)
#        -timeleft             Time (in seconds) until proxy expires
#        -strength             Key size (in bits)
#        -all                  All above options in a human readable format
#        -text                 All of the certificate
#        -path                 Pathname of proxy file
#
#    [options to -exists]      (if none are given, H = B = 0 are assumed)
#        -valid H:M     (-v)   time requirement for proxy to be valid
#        -hours H       (-h)   time requirement for proxy to be valid
#                              (deprecated, use -valid instead)
#        -bits  B       (-b)   strength requirement for proxy to be valid
#    """
def getProxyFile():
  """Get the name of the proxy file according to user settings
  """

  if os.environ.has_key("X509_USER_PROXY"):
    return os.environ["X509_USER_PROXY"]
  else:
    uid = os.getuid()
    return "/tmp/x509up_u"+str(uid)

def getOptions():

  global debug, proxyfile

  try:
    opts,args = getopt.getopt(sys.argv[1:], "hdf:", ["help","version","debug","usage","file="])

  except getopt.GetoptError:
  # print help information and exit:
    printUsage()
    sys.exit(2)

  for o, a in opts:
    if o in ("-d","--debug"):
      debug = 1
    if o in ("-h", "--help", "--usage"):
      printUsage()
      sys.exit()
    if o == "--version":
      print __VERSION__
      sys.exit()
    if o in ("-f", "--file"):
      proxyfile = a
from popen2 import Popen3

def exeCommand(cmd):
    """Return (status, output, error) of executing cmd in a shell."""

    proc = Popen3(cmd,1)
    sts = proc.wait()
    out = proc.fromchild.read()
    error = proc.childerr.read()
    if sts is None: sts = 0
    if out[-1:] == '\n': out = out[:-1]
    if error[-1:] == '\n': error = error[:-1]
    return sts, out, error

proxyfile = getProxyFile()
getOptions()

comm = "openssl x509 -noout -text -in %s" % (proxyfile,)
if debug:
  print "\n",comm,"\n"
status,output = commands.getstatusoutput(comm)
if status:
  print "--- Error testing proxy certificate!"
  print output
  sys.exit(1)

output = string.split(output,"\n")
for f in output:
  li = string.split(f,":")
  if len(li) < 5 and len(li) > 1:
    w = li[0].strip()
    if w == "Subject":
      subject = li[1].replace(", ","/").strip()
    if w == "Issuer":
      issuer = li[1].replace(", ","/").strip()
    if w == "RSA Public Key":
      key = li[1].replace(")","").strip()
      key = key.replace("(","").strip()
    if w == "Not After":
      ind = f.find(':')
      date = f[ind+1:].strip()
#      date = li[3].split(" ")[1],li[1].split(" ")[1],li[1].split(" ")[2],li[3].split(" ")[2]
#      t = li[1].split(" ")[3],li[2],li[3].split(" ")[0]
#      t = " ".join(date),":".join(t)
#      t = " ".join(t).strip()
      date1 = time.strptime(date,"%b %d %H:%M:%S %Y %Z")
#      date1 = time.strptime(t,"%Y %b %d %Z %H:%M:%S")
      date2 = time.gmtime()
      date1 = datetime.datetime(date1[0],date1[1],date1[2],date1[3],date1[4])
      date2 = datetime.datetime(date2[0],date2[1],date2[2],date2[3],date2[4])
      if date2 > date1:
        t = "0:00:00"
      else:
        t = date1 - date2
#        print t
#				print t.days
#				t = str(t.days*24),":00:00"
#				print t
#				t = time.strptime(t,"%H:%M:%S")
#				print t
        m,d = divmod(t.days,24)
        t = t.seconds
        h, t = divmod(t, 3600)
        h = h + d*24
        m, s = divmod(t, 60)
        if h > 24:
          d = float(h)/24
          t = "%ss (%1.1f days)" % (t,d)
        else:
          t = "%s:%s:%s" % (str(h).zfill(2),str(m).zfill(2),str(s).zfill(2))

dirac_group = getDIRACGroup()

print """subject     : /%s
issuer      : /%s
strength    : %ss
path        : %s
timeleft    : %s
DIRAC group : %s""" % (subject,issuer,key,proxyfile,t,dirac_group)
