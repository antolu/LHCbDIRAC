#!/usr/bin/env python
########################################################################
# $Header: /tmp/libdirac/tmp.stZoy15380/dirac/DIRAC3/scripts/Attic/dirac-distribution,v 1.8 2008/03/31 12:25:17 rgracian Exp $
# File :   dirac-distribution
# Author : Ricardo Graciani
########################################################################
__RCSID__   = "$Id: dirac-distribution,v 1.8 2008/03/31 12:25:17 rgracian Exp $"
__VERSION__ = "$Revision: 1.8 $"
"""
    Script to prepare DIRAC distribution tarballs
"""

def parse_options():
  """
   parse command line options:
  """
  import getopt
  help = """
   -b --build                  Prepare compile tars for local platform
   -d --debug                  Set debug flag
   -e --external=<version>     DIRAC-external <version> to install (overwrites -v)
   -h --help                   Print this
   -i --python=<24|25>         Use python<24|25>
   -r --repository=<rep>       Use <rep> as cvs repository
   -t --tar                    Retrieve from tar
   -u --url=<url>              Use <url> to download tarballs
   -v --version=<version>      DIRAC <version> to install
   -S --server                 Prepare full external tar

  from DIRAC framework:

    -o --option=<Option=value> <Option=value> to add
    -s --section=<section>     Set base <section> for relative parsed options
    -c --cert=<cert>           Use server certificate <cert> to connect to Core Services

  """
  shortOptions = 'bde:hi:p:r:tu:v:o:s:S'
  longOptions  = ['build', 'debug', 'external=', 'help', 'python=', 'repository=', 'url=', 'version=',
                  'server', 'tar',
                  'option=', 'section=']
  try:
    ( optionVals, extraOptions ) = getopt.getopt( sys.argv[1:], shortOptions, longOptions )
  except getopt.GetoptError, x:
    dirac.logERROR( 'Parsing command line: %s' % x )
    optionVals = [ ('-h','') ]

  if ('-h','') in optionVals or ('--help','') in optionVals:
    dirac.logHelp( help )

  ext = None
  for o,v in optionVals:
    if o == '-b' or o == '--build':
      dirac.build()
    elif o == '-d' or o == '--debug':
      dirac.debug()
    elif o == '-e' or o == '--external':
      ext = v
    elif o == '-i' or o == '--python':
      dirac.setPython(v)
    elif o == '-r' or o == '--repository':
      dirac.setCVS(v)
    elif o == '-u' or o == '--url':
      dirac.setURL(v)
    elif o == '-v' or o == '--version':
      dirac.setVersion(v)
    elif o == '-t' or o == '--tar':
      dirac.tarFlag()
    elif o == '-S' or o == '--server':
      dirac.requireServer()
      
    if ext: function.External(ext)

def exit( ret ):
  """
   Remove tmpDir and exit
  """
  dirac.logINFO( 'Remember to remove temporary Directory "%s"' % rootPath )
  sys.exit( ret )

import os, sys
from dirac_functions import functions
myFullName  = os.path.realpath( __file__ )
myShortName = os.path.basename( myFullName )

dirac = functions( myFullName )
# get a tmp Root path to prepare the distribution
rootPath = dirac.tmpDir()
# by default use CVS repository
dirac.cvsFlag()

parse_options()
dirac.logINFO( 'Preparing DIRAC distribution at "%s"' %  dirac.root() )
dirac.logINFO( 'Using platform "%s"' %  dirac.localPlatform )

tars =  dirac.createSrcTars()
tars += dirac.createBinTars()

if tars > 0:
  dirac.logINFO( 'Upload tar files to repository:' )
  dirac.logINFO( ' scp %s/*.tar.gz lhcbprod@lxplus.cern.ch:/afs/cern.ch/lhcb/distribution/DIRAC3' % rootPath )

exit(0)


def dirac_make( dir ):
  """
   Run dirac-make at dir
  """
  dirac.logINFO( ' Making "%s"' % dir )
  diracMake = os.path.join( tmpDir, 'DIRAC3', dir, 'dirac-make' )
  makeCmd = '%s 1>> %s.log 2>> %s.log' % ( diracMake, diracMake, diracMake )
  dirac.logDEBUG( makeCmd )
  ret = os.system ( makeCmd )
  if ret != 0:
    dirac.logERROR( 'Failed making %s' %dir )
    dirac.logERROR( 'Check log file at "%s.log"' % diracMake )
    exit( -1 )





dirac.logDEBUG( 'Using CVS Root: "%s"' % defaultCVS )

tmpDir = get_tmpDir()

# DIRAC-scripts

cvs_checkout( 'scripts', defaultVersion )
dirac_magic(  '#! /usr/bin/env python' )
create_tar(   'scripts-%s' % defaultVersion, ['scripts'] )

# DIRAC

cvs_checkout( 'WorkflowLib', defaultVersion )
cvs_checkout( 'DIRAC', defaultVersion )
dirac_make(   'DIRAC' )
dirac_magic(  '#! /usr/bin/env python' )
create_tar(   defaultVersion, ['scripts', 'WorkflowLib', 'DIRAC' ] )

# external/contrib

cvs_checkout( 'external', externalVersion )
cvs_checkout( 'contrib',  externalVersion )

create_tar( 'external-%s' % externalVersion, ['external', 'contrib'] )

if buildFlag:

  # Determine platform
  if not localPlatform:
    localPlatform = function.platform()
  dirac.logINFO( 'Using platform "%s"' %  localPlatform )
  
  
  # Compile (python2.4)
  # pure Client
  dirac_make( 'external/Python-2.4.4' )
  dirac_make( 'contrib/pyGSI' )
  
  create_tar( 'external-client-%s-%s-python24' % ( externalVersion, localPlatform ), [ localPlatform ] )
  # full external
  dirac_make( 'external/runit' )
  dirac_make( 'external/MySQL' )
  dirac_make( 'external/MySQL-python' )
  dirac_make( 'external/Pylons' )
  dirac_make( 'external/matplotlib' )
  
  create_tar( 'external-%s-%s-python24' % ( externalVersion, localPlatform ), [ localPlatform ] )
  
  os.rename( os.path.join( 'DIRAC3', localPlatform ), os.path.join( 'DIRAC3', localPlatform + "-python24" ) )
  
  # Compile (python2.5)
  # pure Client
  dirac_make( 'external/sqlite-3.5.4' )
  dirac_make( 'external/Python-2.5' )
  dirac_make( 'contrib/pyGSI' )
  
  create_tar( 'external-client-%s-%s-python25' % ( externalVersion, localPlatform ), [ localPlatform ] )
  # full external
  dirac_make( 'external/runit' )
  dirac_make( 'external/MySQL' )
  dirac_make( 'external/MySQL-python' )
  dirac_make( 'external/Pylons' )
  dirac_make( 'external/matplotlib' )
  
  create_tar( 'external-%s-%s-python25' % ( externalVersion, localPlatform ), [ localPlatform ] )
  
  os.rename( os.path.join( 'DIRAC3', localPlatform ), os.path.join( 'DIRAC3', localPlatform + "-python25" ) )

dirac.logINFO( 'Upload  tar files to repository:' )
dirac.logINFO( ' scp %s/*.tar.gz lhcbprod@lxplus.cern.ch:/afs/cern.ch/lhcb/distribution/DIRAC3' % tmpDir )

exit(0)

"""
#!/bin/bash
#
#$Header: /tmp/libdirac/tmp.stZoy15380/dirac/DIRAC3/scripts/Attic/dirac-distribution,v 1.8 2008/03/31 12:25:17 rgracian Exp $
#
# preliminary version to prepare external package needed for DIRAC3
#
# __RCSID__='$Id: dirac-distribution,v 1.8 2008/03/31 12:25:17 rgracian Exp $'

source `dirname $0`/dirac-functions.sh

echo
echo "Preparing DIRAC distribution at ${TMP_DIR}"
echo
echo "  type any password"
echo

DIRAC_CVS_GET DIRAC3/scripts                                             || exit 1
echo
echo "   building DIRAC from CVS tag ${DIRAC_CVS_TAG}"
echo

DIRAC_CVS_GET DIRAC3/WorkflowLib                                             || exit 1
echo
echo "   building WorkflowLib from CVS tag ${DIRAC_CVS_TAG}"
echo

DIRAC_MAKE    DIRAC3/DIRAC                                               || exit 1

tarfile=DIRAC-${DIRAC_CVS_TAG}.tar.gz
DIRAC_TAR     ${tarfile} scripts DIRAC WorkflowLib                                   || exit 1

echo
echo
echo "scp ${TMP_DIR}/DIRAC3/${tarfile} lhcbprod@lxplus.cern.ch:/afs/cern.ch/lhcb/distribution/DIRAC3"
echo
echo

exit
"""