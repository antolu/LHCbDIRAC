LocalInstallation
{
 # Here, some things MUST be there for the system administrator to work, but I do not know which one.
 # To be checked with Joel.
 #To install the Server version of DIRAC (the default is client)
 InstallType = server
 #LCG python bindings for SEs and LFC. Specify this option only if your installation
 #uses those services
 UseVersionsDir = True
 #The directory of the DIRAC software installation
 TargetPath = /opt/dirac
 Project = LHCb
 #Default name of system instances, like Certification
 InstanceName = <DefaultSystemInstance>
 #Flag determining whether the Web Portal will be installed
 WebPortal = no
 #The following options defined the MySQL DB connectivity
 InstancePath = /opt/dirac
 RootPath = /opt/dirac/pro
 Extensions = LHCb

}
DIRAC
{
  # e.g. LHCb-Production
  Setup = <Your production setup>
  VirtualOrganization = <your VO>
  Hostname = <your hostname>
  Security
  {
    UseServerCertificate = yes
  }
  Configuration
  {
    # These two lines indicate that this server
    # is to be used as a master server, and serving
    # a file BOINC-Conf.
    Master = yes
    Name = BOINC-Conf

    # This is the address of the central CS
    Servers = <your real CS>
  }
  Setups
   {
    # needed because we run a CS
     <your production setup>
     {
       Configuration = <your production system>
       Framework = <your production system>
     }
   }

}
LocalSite
{
  Site = BOINCGW.World.org
}
Systems
{
   Databases
   {
      User = <your db user>
      Password = <your db password>
      Host = <your db host>
      Port = <your db port>

   }
  Configuration
  {
    # e.g. Production
    <your production system>
    {
      Services
      {
        Server
        {
          HandlerPath = DIRAC/ConfigurationSystem/Service/ConfigurationHandler.py
          Port = 9135
          Protocol = dips
          Authorization
          {
            Default = authenticated
          }
          # The cfg server has anyway no access to the monitoring, it does not know
          # the real CS
          DisableMonitoring = True
        }
      }
    }
  }
  DataManagement
  {
    <your production system>
    {
      Services
      {
        # This is used as a backend of BOINC-SE
        # to store the output files
        StorageElement
        {
          Port = 9148
          HandlerPath = DIRAC/DataManagementSystem/Service/StorageElementHandler.py
          # Allow read and write from it
          WriteAccess = true
          ReadAccess = true
          MaxThreads=50
          Authorization
          {
            Default = authenticated
            FileTransfer
            {
              Default = authenticated
            }
          }
          # Do not forget to create the directory
          BasePath = <wherever you want to put the data on the local disk>
          # Maximum size of the file you expect in MB
          MaxStorageSize = 2000
          DisableMonitoring = True
        }

        # This is used as a proxy to fetch the input sandbox
        StorageElementProxy
        {
          LogLevel = INFO
          HandlerPath = DIRAC/DataManagementSystem/Service/StorageElementProxyHandler.py
          Port = 9199
          # Forbid any writing to it.
          WriteAccess = false
          Protocol = dips
          # Do not forget to create the directory
          BasePath = <Local path you want to use as a buffer zone>
          Authorization
          {
            Default = authenticated
            FileTransfer
            {
              Default = authenticated
            }
          }
          DisableMonitoring = True
        }
      }
    }
  }
  Framework
  {
    <your production system>
    {
      Services
      {
        SystemAdministrator
        {
          Port = 9162
          Authorization
          {
            Default = ServiceAdministrator
          }
          MonitoringEnabling = False
        }
        # This local proxy manager is used only to hold MrBoinc's proxy
        ProxyManager
        {
          Port = 9152
          Authorization
           {
             Default = authenticated
             getProxy = FullDelegation
             getProxy += LimitedDelegation
             getProxy += PrivateLimitedDelegation
             getVOMSProxy = FullDelegation
             getVOMSProxy += LimitedDelegation
             getVOMSProxy += PrivateLimitedDelegation
             getProxyWithToken = FullDelegation
             getProxyWithToken += LimitedDelegation
             getProxyWithToken += PrivateLimitedDelegation
             getVOMSProxyWithToken = FullDelegation
             getVOMSProxyWithToken += LimitedDelegation
             getVOMSProxyWithToken += PrivateLimitedDelegation
             getLogContents = ProxyManagement
             setPersistency = ProxyManagement
           }
           DisableMonitoring = True
        }
      }
      URLs
      {
        # This points to the local ProxyManager and is used by the WMSSecureGW
        BoincProxyManager=dips://<your local host>:9152/Framework/ProxyManager
      }
      Databases
      {
        ProxyDB
        {
          DBName = ProxyDB
        }
      }
    }
  }
  WorkloadManagement
  {
    <your production system>
    {
      Services
      {
        # This is the service that will act as a gateway for all the calls
        WMSSecureGW
        {
          Port = 9133
          HandlerPath = LHCbDIRAC/WorkloadManagementSystem/Service/WMSSecureGWHandler.py
          Authorization
          {
            Default = authenticated
            FileTransfer
            {
              Default = authenticated
              # ProxyManager methods need to be a bit protected.
              getProxy = FullDelegation
              getProxy += LimitedDelegation
              getProxy += PrivateLimitedDelegation
              getVOMSProxy = FullDelegation
              getVOMSProxy += LimitedDelegation
              getVOMSProxy += PrivateLimitedDelegation
            }
          }
          DisableMonitoring = True
        }
        # We redefine a local sandbox store that will store the files localy
        SandboxStore
        {
          Port = 9196
          LocalSE = <Whatever you want to call your local sandbox store>
          LogLevel = VERBOSE
          HandlerPath = DIRAC/WorkloadManagementSystem/Service/SandboxStoreHandler.py
          # Do not forget to create the directory
          BasePath = <local path where to store the sandbox>
          Authorization
          {
            Default = authenticated
            FileTransfer
            {
              Default = authenticated
            }
          }
          SandboxPrefix = <your vo for example>
          DisableMonitoring = True
        }
      }
      Databases
      {
        SandboxMetadataDB
        {
          DBName = SandboxMetadataDB
        }
      }
    }
  }
  # No Requests from BOINC jobs should ever make it to the real system, and everything should be handled here.
  RequestManagement
  {
    <your production system>
    {
      Services
      {
        ReqManager
        {
          Port = 9140
          Authorization
          {
            Default = authenticated
          }
          DisableMonitoring = True
        }
        RequestProxy
        {
          LogLevel = INFO
          HandlerPath = DIRAC/RequestManagementSystem/Service/ReqProxyHandler.py
          Port = 9198
          Protocol = dips
          Authorization
          {
            Default = authenticated
          }
          DisableMonitoring = True
        }
      }
      URLs
      {
        # These should be over writen not to use the central RMS
        ReqManager = dips://<your local host>:9140/RequestManagement/ReqManager
        ReqProxyURLs = dips://<your local host>:9198/RequestManagement/ReqProxy
      }
      Databases
      {
        ReqDB
        {
          DBName = ReqDB
        }
      }
     Agents
     {
       RequestExecutingAgent
       {
         PollingTime = 60
         RequestsPerCycle = 80
         MinProcess = 16
         MaxProcess = 16
         ProcessPoolQueueSize = 50
         ProcessPoolTimeout = 900
         ProcessTaskTimeout = 900
         ProcessPoolSleep = 1
         TimeOut = 300
         TimeOutPerFile = 300
         MaxAttempts = 256
         BulkRequest = 40
         OperationHandlers
         {
           ForwardDISET
           {
             Location = DIRAC/RequestManagementSystem/Agent/RequestOperations/ForwardDISET
             LogLevel = INFO
             MaxAttempts = 256
             TimeOut = 120
           }
           ReplicateAndRegister
           {
             Location = DIRAC/DataManagementSystem/Agent/RequestOperations/ReplicateAndRegister
             FTSMode = False
             RMMode = True
             FTSBannedGroups = dirac_user
             FTSBannedGroups += lhcb_user
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 600
           }
           PutAndRegister
           {
             Location = DIRAC/DataManagementSystem/Agent/RequestOperations/PutAndRegister
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 600
           }
           RemoveReplica
           {
             Location = DIRAC/DataManagementSystem/Agent/RequestOperations/RemoveReplica
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 120
           }
           RemoveFile
           {
             Location = DIRAC/DataManagementSystem/Agent/RequestOperations/RemoveFile
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 120
           }
           RegisterFile
           {
             Location = DIRAC/DataManagementSystem/Agent/RequestOperations/RegisterFile
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 120
           }
           LogUpload
           {
             Location = LHCbDIRAC/DataManagementSystem/Agent/RequestOperations/LogUpload
             TimeOutPerFile = 360
             MaxAttempts = 256
             LogLevel = INFO
           }
           SetFileStatus
           {
             Location = DIRAC/TransformationSystem/Agent/RequestOperations/SetFileStatus
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 120
           }
           WMSSecureOutputData
           {
              # e.g. LHCbDIRAC/DataManagementSystem/Agent/RequestOperations/WMSSecureOutputData
             Location = < Localtion of your validation operation>
             LogLevel = INFO
             MaxAttempts = 256
             TimeOutPerFile = 120
           }
         }
         DisableMonitoring = True
       }
       CleanReqDBAgent
       {
         PollingTime = 60
         ControlDirectory = control/RequestManagement/CleanReqDBAgent
         DeleteGraceDays = 30
         DeleteLimit = 10000
         DeleteFailed = False
         KickGraceHours = 12
         KickLimit = 10000
         DisableMonitoring = True
       }
     }
   }
 }
}
Operations
{
  <Your production setup>
  {
    DataManagement
    {
     # Adapt to your real system, but file should be there
     # to allow to replicateAndRegister from local BOINC-SE
     # without extra copy
     ThirdPartyProtocols = srm
     ThirdPartyProtocols += file
     ThirdPartyProtocols += dips
    }
    # This section is used only by the WMSSecureGW to choose its proxy
    BoincShifter
    {
      # BoincUser is the only proxy that will ever be returned
      # to the pilot, whoever they ask.
      BoincUser
      {
        User = MrBoinc
        Group = boinc_user
      }
      # This proxy is used to set the DN of requests when they come back
      # at the end of a job. This is of course meant to go ASAP
      # We should put the DN of the real owner of the job.
      ProductionManager
      {
        User = <your central production manager>
        Group = <its group>
      }
    }

    ResourceStatus
    {
      #Config
      #{
      #  State = InActive
      #}
      Policies
      {
        # We have to overwrite the always banned rule in the Central CS (see :ref:`_centralCSChanges`)
        # so it must be named the same
        Ban_BOINC_SE
        {
          policyType = AlwaysActive
          matchParams
          {
            name = <name of your SE>
            statusType = ReadAccess
            statusType += WriteAccess
            statusType += CheckAccess
            elementType = StorageElement
           }
         }
      }
    }
  }
}
Resources
{
  # Attach localy BOINC-SE so that the file protocol can be used
  Sites
  {
      <YourLocalSite(probablyMachineName)>
      {
         SE = BOINC-SE
      }
  }
  StorageElements
  {
    # The storage that will be used to output the file
    BOINC-SE
    {
      StorageBackend = DISET
      ReadAccess = Active
      WriteAccess = Active
      CheckAccess = Active
      RemoveAccess = Active
      AccessProtocol.0
      {
        PluginName = File
        Protocol = file
        Path = <TheBasePathOfTheStorageElementConfiguration>
        Access = local
      }
      AccessProtocol.1
      {
        Host = <your local host>
        Port = 9148
        PluginName = DIP
        Protocol = dips
        Path = /DataManagement/StorageElement
        Access = remote
      }
    }

  }
}
Registry
{
  DefaultGroup = boinc_user
  Users
  {
    # Your self generated user certificate
    MrBoinc
    {
      DN = /O=Volunteer Computing/O=CERN/CN=MrBoinc
      CA = /O=Volunteer Computing/CN=Volunteer Computing Signing Certification Authority
    }
  }
  Groups
  {
    boinc_user
    {
      Users = MrBoinc
      Properties = NormalUser
    }
  }
  Hosts
  {
    # your self generated host certificate
    MrBoincHost
    {
      DN = /O=Volunteer Computing/O=CERN/CN=MrBoincHost
      CA = /O=Volunteer Computing/CN=Volunteer Computing Signing Certification Authority
      # the properties are those needed to retrieve a proxy
      Properties = GenericPilot
      Properties += LimitedDelegation
    }
  }
}
