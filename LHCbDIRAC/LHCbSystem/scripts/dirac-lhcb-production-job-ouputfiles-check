#! /usr/bin/env python

from DIRACEnvironment import DIRAC
from DIRAC.Core.Base import Script


def usage():
  print 'Usage: %s [Try -h,--help for more information] job [job2 [job3 [...]]]' %(Script.scriptName)
  DIRAC.exit(2)


Script.parseCommandLine( ignoreErrors = True )
args = Script.getPositionalArgs()

if len(args)==0:
  usage()

def printDict(dictionary):
  """ Dictionary pretty printing
  """

  key_max = 0
  value_max = 0
  for key,value in dictionary.items():
    if len(key) > key_max:
      key_max = len(key)
    if len(str(value)) > value_max:
      value_max = len(str(value))
  for key,value in dictionary.items():
    print key.rjust(key_max),' : ',str(value).ljust(value_max)

from DIRAC.LHCbSystem.Utilities.JobOutputLFN import getJobOutputLFN
from DIRAC.DataManagementSystem.Client.ReplicaManager import ReplicaManager
from DIRAC.BookkeepingSystem.Client.BookkeepingClient import BookkeepingClient

rm = ReplicaManager()
bk = BookkeepingClient()

for arg in args:
  try:
    job = int(arg)
  except:
    print "Wrong argument, job must be integer %s  "%arg
    continue
  print "Job %d"%job
   
  result = getJobOutputLFN(job)
  if result['OK']:
    lfns = result['Value']

    #Check LFC
    replicas = rm.getReplicas(lfns)
    if replicas['OK']:
      print "LFC replicas:"
      value = replicas['Value']
      successful = value.get('Successful',[])
      if len(successful):
        print "Successful:"
	printDict(successful)  
      failed = value.get('Failed',[])
      if len(failed):
        print "Failed:"
	printDict(failed)  

    #Check Bookkeeping
    bkresponce = bk.exists(lfns)
    if bkresponce['OK']:
      print "Bookkeping:"
      bkvalue = bkresponce['Value']
      printDict(bkvalue)
    else:
      print bkresponce['Message']
  else:
    print result['Message']
