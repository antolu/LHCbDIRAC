Log level
--    self.always    = 'ALWAYS'
--    self.info      = 'INFO'
--    self.verbose   = 'VERB'
--    self.debug     = 'DEBUG'
--    self.warn      = 'WARN'
--    self.error     = 'ERROR'
--    self.exception = 'EXCEPT'
--    self.fatal     = 'FATAL'
--    self.__levelDict = {
--       self.always    : 30,
--       self.info      : 20,
--       self.verbose   : 10,
--       self.debug     : 0,
--       self.warn      : -10,
--       self.error     : -20,
--       self.exception : -20,
--       self.fatal     : -30


Systems
{
  ProductionManagement
  {
    Development
    {
      URLs
      {
        ProductionManager=dips://volhcb03.cern.ch:9131/Productionmangement/ProductionManager
      }
      Services
      }
        ProductionManager
        {
          LogLevel = DEBUG
          LogBackends = stdout
          HandlerPath=DIRAC/ProductionManagementSystem/Service/ProductionManagerHandler.py
          Port=9131
          Protocol = dips
          Authorization
          {
            Default=all
          }
        }
      }
      Databases
      {
        ProductionDB
        {
          LogLevel = DEBUG
          LogOutputs = stdout
          User = Dirac
          Host = localhost
          Password = lhcbMySQL
          DBName = ProductionDB
        }
      }
      Agents
      {
      }
    }
  }
}

Commands
export PYTHONPATH=/afs/cern.ch/user/g/gkuznets/workspace/DIRAC3/scripts:/afs/cern.ch/user/g/gkuznets/workspace/DIRAC3:/opt/dirac/slc4_ia32_gcc34/lib:/opt/dirac/contrib

mysql -u Dirac --password=lhcbMySQL ProductionDB

ProductionDB lhcbMySQL
/afs/cern.ch/user/g/gkuznets

/opt/dirac/slc4_ia32_gcc34/bin/python2.4 /opt/dirac/DIRAC/Core/scripts/dirac-service ProductionManagement/ProductionManager
/opt/dirac/slc4_ia32_gcc34/bin/python2.4 /afs/cern.ch/user/g/gkuznets/workspace/DIRAC3/DIRAC/Core/scripts/dirac-service ProductionManagement/ProductionManager


CLI
/opt/dirac/slc4_ia32_gcc34/bin/python2.4 /opt/dirac/DIRAC/ProductionManagementSystem/scripts/dirac-production-manager-cli.py

Agent
/opt/dirac/slc4_ia32_gcc34/bin/python2.4 /opt/dirac/DIRAC/Core/scripts/dirac-agent ProductionManagement/TransformationAgent -o LogLevel=debug MaxCycles=1
/opt/dirac/slc4_ia32_gcc34/bin/python2.4 /afs/cern.ch/user/g/gkuznets/workspace/DIRAC3/DIRAC/Core/scripts/dirac-agent ProductionManagement/TransformationAgent -o LogLevel=debug MaxCycles=1

Grid credential
(7:36:12 PM) stuart-d3@jabber.org:
#!/usr/bin/env python
import os,sys
import DIRAC
from DIRAC.Core.Utilities.GridCredentials                import getGridProxy,getCurrentDN,setDIRACGroup
os.system('voms-proxy-init -voms lhcb:/lhcb/Role=production -valid 50:0')
proxy = getGridProxy()
setDIRACGroup('lhcb_prod')

/lhcb/data/CCRC08/RAW/LHCb/CCRC/420153/420153_0000096704.raw
{'FileExists': 1,
'Forced': False,
'PassFilter': True,
'Retained': True,
'ReplicaExists': 1,
'AddedToCatalog': True,
'AddedToTransformation': False}

select * from T_106 where JobID>0 order by JobID limit 200;
======================== TO DO ===========================
- Single addParameter() replacing appendParameterXXX series of methods.
It does always copying of the
argument parameters. The the workflow writer do not need to know where to use what.
For example:
step.appendParameterCopyLinked(module.parameters) ->
step.addParameter(module.parameters.getInput())

- discourage using parameter unlinking

- use link() and linkUp() method names everywhere ( replacing linkParameterUp, setLink )
- do not allow object name in the linkUp() arguments

- some other method names can be streamlined as well

2. Workflow contents:

- Parameter value type and functional type. I think they should be separate entites. We had a lot of discussions
  on that. But there are cases like "JDL" type parameter can be string or integer or float. There is no way to
  distinguish now.
- more complex types should be allowed, in particular structures ( or dictionaries ). For example, in the module
  body one can refer to  a parameter value as  self.parameter.part1. For example, an output data file specification
  needs several fields. This can be used in the body as

self.myout.name
self.myout.outputSE
self.myout.dataType

  Internally, structures can be converted to/from strings in order to store to XML, for example.

3. Execution:

- Step execution must handle exceptions in the module execution

- Step execution must handle error codes of the module execution. My suggestion will be to impose a limitation
  that module bodies must return S_OK structures which can be interpreted by Steps. The workflow as a whole
  should return an S_OK() structure with a log of all the Step/module execution codes.

- Step should collect statistical data while module execution ( CPU, wall clock, may be something else )
  and make it available to module bodies setting some standard variables.

4. Utilities

A number of utilities should be provided to operate on workflow objects (Workflow.Utility module):

- create single module workflow
- resolve variable references, instead of resolveGlobals in each object
- get input data of the whole workflow
- get outputdata of the whole workflow
- create JDL

  LEt me know your availability for the work. I can do some modifications myself but I do not want them to clash with yours if you do anything.

  Cheers,
  Andrei
