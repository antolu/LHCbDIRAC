# $Id: step_primary,v 1.1 2007/11/27 10:30:03 joel Exp $
"""
    This is a comment
"""
__RCSID__ = "$Revision: 1.1 $"

# $Source: /tmp/libdirac/tmp.stZoy15380/dirac/DIRAC3/WorkflowLib/Step/step_primary,v $

from DIRAC.Core.Workflow.Parameter import *
from DIRAC.Core.Workflow.Module import *
from DIRAC.Core.Workflow.Step import *
from DIRAC.Core.Workflow.Workflow import *
from DIRAC.Core.Workflow.WorkflowReader import *

""" Collection of objects for the testing"""

body = 'from DIRAC.Interface.API.Workflows.LHCbGaudiApplication import GaudiApplication\n'

enable = Parameter("enable","True","bool","","",True, False, "if False execution disabled")
loglevel = Parameter("debug", "False", "bool", "", "", True, False, "allows to print additional information")
result = Parameter("result","Error",'string','','',False,True,"Result should be dictionary")

#Gaudi Application specific
gaudiParams = []
appName = Parameter("appName","DaVinci","string","","",True, False, "Application Name")
gaudiParams.append(appName)
appVersion = Parameter("appVersion","v19r0","string","","",True, False, "Application Version")
gaudiParams.append(appVersion)
optionsFile = Parameter("optionsFile","DaVinci.opts","string","","",True,False,"Options File")
gaudiParams.append(optionsFile)
systemConfig = Parameter("systemConfig","slc3_ia32_gcc323","string","","",True,False,"Job Platform")
gaudiParams.append(systemConfig)
logfile = Parameter('logfile','None','string','','',False,True,'Log file')

module1 = ModuleDefinition('GaudiApplication')

module1.appendParameter( enable )
module1.appendParameter( loglevel )
module1.appendParameter( result )
module1.appendParameter( logfile )

for p in gaudiParams:
  module1.appendParameter(p)

module1.setDescription('Gaudi Application module')
module1.setBody(body)

step1 = StepDefinition('Gaudi_App_Step')
step1.addModule(module1)

for p in gaudiParams:
  step1.appendParameter(Parameter(parameter=p))

moduleInstance = step1.createModuleInstance('GaudiApplication', 'Module1')

for p in gaudiParams:
  paramName = p.getName()
  moduleInstance.findParameter(paramName).link('self',paramName) # input params
  step1.appendParameter(Parameter(parameter=p))

step1.appendParameter(Parameter(parameter=result))
step1.appendParameter(Parameter(parameter=logfile))
step1.findParameter('result').link('Module1','result') # output param
step1.findParameter('logfile').link('Module1','logfile')

workflow1 = Workflow('main')
workflow1.setDescription('Workflow of GaudiApplication')
workflow1.addStep(step1)

for p in gaudiParams:
  workflow1.appendParameter(Parameter(parameter=p))

workflow1.appendParameter(Parameter(parameter=result))
workflow1.appendParameter(Parameter(parameter=logfile))

stepInstance = workflow1.createStepInstance('Gaudi_App_Step', 'Step1')
for p in gaudiParams:
  paramName = p.getName()
  stepInstance.findParameter(paramName).link('self',paramName)

workflow1.findParameter('result').link('Step1','result')
workflow1.findParameter('logfile').link('Step1','logfile')
#workflow1.findParameter('command').setValue('ls -l')

#============================================================================
# test section
#============================================================================
#w1.resolveGlobalVars()
#print "# ================ CODE ========================"

#print workflow1.createCode()
eval(compile(workflow1.createCode(),'<string>','exec'))
#workflow1.execute()



