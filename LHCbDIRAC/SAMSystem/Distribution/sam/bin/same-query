#!/usr/bin/env python

import os
import sys
import getopt

# set SAME home directory assuming that executable is in SAME_HOME/bin
def setupHomeDir():
    global same_home
    if not os.environ.has_key('SAME_HOME'): 
	same_home=os.path.normpath(
	    os.path.dirname(os.path.abspath(sys.argv[0])) + "/..")
	os.environ['SAME_HOME']=same_home
    else:
	same_home=os.environ['SAME_HOME']
    sys.path.append(same_home+'/lib/python')
    os.environ['PATH']=same_home+'/bin:'+os.environ['PATH']

setupHomeDir()
from same.Config import config
from same.Database import get

def parseArgs():
    attrs=[]
    filter={}

    for arg in sys.argv[1:]:
	if '=' in arg:
	    attr,values=arg.split('=')
	    filter[attr]=values.split(',')
	else:
	    attrs.append(arg)

    if not attrs:
	raise Exception("Empty attribute list!")
    return attrs,filter

def printUsage():
    sys.stderr.write("Usage:\n%s [<operation>] <attrs> <filter>\n\n"%
		     sys.argv[0])
    
def createFilter(sensor,user_filter):
    common_filter=config.get('sensors','common_filter').strip('"\'')
    try:
	sensor_filter=config.get('sensors','%s_filter'%sensor).strip('"\'')
    except:
	sensor_filter='serviceabbr=%s'%sensor
    filter_string=' '.join([common_filter,sensor_filter,user_filter])
    filter=dict(map(lambda x: (x[0],x[1].split(',')),map(lambda x: x.split('='),filter_string.split())))
    return filter

# MAIN


if __name__ == '__main__':
    try:
	attrs,filter=parseArgs()
    except Exception,e:
	printUsage()
	sys.exit(1)

    try:
	tuples=get(attrs,filter)
    except Exception,e:
        print e.args[0]
	sys.exit(1)

    for tuple in tuples:
	print '\t'.join(tuple)

