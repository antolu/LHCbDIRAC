#!/usr/bin/env python

import os
import sys
import getopt

# set SAME home directory assuming that executable is in SAME_HOME/bin
def setupHomeDir():
    global same_home
    if not os.environ.has_key('SAME_HOME'): 
	same_home=os.path.normpath(
	    os.path.dirname(os.path.abspath(sys.argv[0])) + "/..")
	os.environ['SAME_HOME']=same_home
    else:
	same_home=os.environ['SAME_HOME']
    sys.path.append(same_home+'/lib/python')
    os.environ['PATH']=same_home+'/bin:'+os.environ['PATH']

setupHomeDir()

operations=['prepare','submit']
def parseArgs():
    p={}
    opts,args=getopt.getopt(sys.argv[1:],'hlu:m:v:t:c:',['help']+map(lambda x: x+'=',operations))
    showList=False
    for o,v in opts:
        if o=='-c':
	    if v[0]!='/':
	        v=os.getcwd()+'/'+v
            os.environ['SAME_CONFIG']=v
        elif o in ('-h','--help'):
            raise Exception,"Help requested"
        elif o=='-l':
            showList=True
        elif o=='-u':
            p['serviceURI']=v
        elif o=='-v':
            p['vo']=v
        elif o=='-t':
            p['timeout']=int(v)
        elif o=='-m':
            p['metric']=v
        else:
            if not p.has_key('operation'):
                p['operation']=o.strip('-')
            p['sensor']=v
    try:
        i=args.index('--')
        p['sargs']=args[i+1:]
        args=args[:i]
    except:
        sargs=[]

    if not p.has_key('operation'): 
        raise Exception,"Operation was not specified"
    if not p.has_key('sensor'):
        raise Exception,"Sensor was not specified"
    if showList:
        p['operation']='list-'+p['operation']
    
    return p

def printUsage():
    sys.stderr.write("\nUsage:\n%s <operation> <sensor_name> [<options>] [-- <sensor args>]\n"%
		     sys.argv[0])
    sys.stderr.write("\nOperations:\n"+'\n'.join(map(lambda x: '--'+x,operations))+'\n')
    sys.stderr.write("""\nOptions should be specified according to WLCG Monitoring WG standard:
    -h | --help  print this help screen
    -l           list metrics that probe runs
                   (operation and sensor has to be specified)
    -u <URI>     the URI of a service endpoint to run the test against.
                 If none is supplied, it is run against a service on the
                   local host
    -m <metric>  The specific metric to gather
                   (if not specified, all metrics are gathered)
    -v <VO>      The VO to gather metric for
                   (if not specified, the VO is taken from VOMS proxy)
    -t <secs>    A per-metric timeout that the probe should obey
    
""")
    
# MAIN

from same import Probe
from same import Sensor

try:
    params=parseArgs()
except Exception,e:
    print >> sys.stderr,e
    printUsage()
    sys.exit(1)

for p,v in params.items():
    print >> sys.stderr, "%s: %s"%(p,str(v))

code=None
try:
    code=Probe.run(params)
except KeyboardInterrupt:
    print >> sys.stderr,"Ctrl+C was pressed!"
    sys.exit(1)
except Exception, e:
    print >> sys.stderr,e
    sys.exit(1)

if code:
    sys.exit(code)
    


