#!/usr/bin/env python

import sys
import string
import re
import time
import os
import getopt
import popen2
from urlparse import urlsplit

publisherWSDL=''
verbose=False

# set SAME home directory assuming that executable is in SAME_HOME/bin
def setupHomeDir():
    global same_home
    if not os.environ.has_key('SAME_HOME'): 
        same_home=os.path.normpath(
                                   os.path.dirname(os.path.abspath(sys.argv[0])) + "/..")
        os.environ['SAME_HOME']=same_home
    else:
        same_home=os.environ['SAME_HOME']
    sys.path.append(same_home+'/lib/python')
    os.environ['PATH']=same_home+'/bin:'+os.environ['PATH']

setupHomeDir()

from SOAPpy import WSDL
from SOAPpy import SOAPProxy
from same import Probe

def encode(s):
   valids = ""
   for i in s:
      if (i in '\t\n') or ((ord(i) >= 32) and (ord(i) <= 127)):
         valids += i
      else:
         valids += ''
   return valids.replace("\\", "\\\\").replace("#", "\\#").replace("|", "\\|")


class TableDef:
    def __init__(self, cols, req_cols, ts_col=None):
        self.cols=cols
        self.req_cols=req_cols
        self.ts_col=ts_col

    def encode(self, tuple):
        if self.ts_col:
            if not tuple.has_key(self.ts_col):
                tuple[self.ts_col]=int(time.time())
        for col in self.req_cols:
            if not tuple.has_key(col):
                return None           
        return '|'.join(map(lambda x: encode(str(tuple.get(x, ''))), self.cols))

tableDefs={ 'TestDef': TableDef(['testname', 'testtitle', 'testabbr', 'testhelp', 
                                 'datatype', 'dataunit', 'datathreshold'], 
                                ['testname']), 
            'TestEnvVars': TableDef(['envname', 'name', 'value'], ['envname', 'name']), 
            'TestData': TableDef(['voname', 'testname', 'nodename', 'envname', 'status', 
                                  'summarydata', 'detaileddata', 'timestamp'], 
                                 ['voname', 'testname', 'nodename'], 'timestamp'), 
            'JobTestDef': TableDef(['jobtestname', 'jobtesttitle', 'jobtestabbr', 
                                    'jobtesthelp', 
                                    'datatype', 'dataunit', 'datathreshold'], 
                                   ['jobtestname']), 
            'JobTestData': TableDef(["jobid", "starttime", "jobtestname", "testtime", 
                                     "status", "summary"], 
                                   ["jobid", "starttime", "jobtestname", "testtime"], 
                                    "testtime"), 
            'JobStart': TableDef(["jobid", "cename", "wnname", "wnfingerprint", 
                                  "starttime", "voname", "vomsgroup", "vomsrole", 
                                  "username", "groupname", "freemem", "freeswap", 
                                  "freescratch", "proxylifetime"], 
                                 ['jobid', 'cename', 'wnname', 'wnfingerprint', 'starttime'], 
                                 'starttime'), 
            'JobEnd': TableDef(["jobid", "starttime", "endtime", "exitcode", "freescratch"], 
                               ["jobid", "starttime", "endtime"], 
                               "endtime")}
      
def usage():
   global tableDefs
   print "Usage: " + sys.argv[0] + " [options] TABLE_NAME FILE [FILE...]"
   print ""
   print "Where TABLE_NAME must be one of the followings: " + ', '.join(tableDefs.keys())
   print "and FILE is a file containing the tuples of test results"
   print ""
   print "OPTIONS:"
   print "\t -h, --help"
   print "\t\t Print this help text and exit."
   print "\t -p, --publisher_wsdl url"
   print "\t\t URL to the Publisher Web Service" 
   print "\t -v, --verbose"
   print "\t\t Be more verbose."
   print ""





def load_tuples(tableDef, filename=None):
   global verbose
   global publisherWSDL
   if verbose:
      print "Reading data from file:", filename, "\n"

   if filename:
      lines = open(filename).readlines()
   else:
      lines = sys.stdin.readlines()
      filename='STDIN'

   if os.environ.get('SAME_PUBLISHER_OUTPUT'):
       outfilename=os.environ['SAME_PUBLISHER_OUTPUT']
       if verbose:
           print "Publishing to a file: %s"%outfilename
       open(outfilename, "a").write(''.join(lines))
           
   tuples = []
   curTuple={}
   curColumn=None
   curValue=None
   n=0
   for line in lines:
       if not line.strip():
           continue
       n+=1
       if line=='EOT\n':
           if curColumn:
               curTuple[curColumn]=curValue
           s=tableDef.encode(curTuple)
           if s:
               curTuple['serialized']=s
               tuples.append(curTuple)
           else:
               print "Warning: %s line %d - wrong tuple!"%(filename, n)
           curColumn=None
           curTuple={}
       elif curColumn:
           curValue+=line
       else:
           try:
               column, value=map(str.strip, line.split(': ', 1))
               column=column.lower()
           except:
               print "Warning: %s line %d - syntax error, line ignored!"%(filename, n)
               continue
           if value=='EOT':
               curValue=''
               curColumn=column
           else:
               curTuple[column]=value
   # check if there an active curTuple
   if curColumn:
       curTuple[curColumn]=curValue
   if curTuple:
       s=tableDef.encode(curTuple)
       if s:
           curTuple['serialized']=s
           tuples.append(curTuple)
       else:
           print "Warning: %s line %d - wrong tuple!"%(filename, n)

   return tuples



def publish_tuples_samws(tableName, tuples):
   global publisherWSDL
   global verbose

   if  publisherWSDL.lower() in ('0', 'off', 'no', 'disabled'): 
       return 

   if not tuples:
       print "No tuples to publish!"
       return 3
   
   blockOfTuples='#'.join(map(lambda x: x['serialized'], tuples))

   
   if os.environ.has_key("http_proxy"):
       my_http_proxy=urlsplit(os.environ["http_proxy"])[1]
   elif os.environ.has_key("HTTP_PROXY"):
       my_http_proxy=urlsplit(os.environ["HTTP_PROXY"])[1]
   else:
       my_http_proxy=None

      
   if verbose:
       print "\nUsing SAME_PUBLISHER_WSDL = " + publisherWSDL
       if my_http_proxy:
           print "Using HTTP proxy: "+my_http_proxy

   try:
       p = WSDL.Proxy(publisherWSDL, http_proxy=my_http_proxy)
   except:
       ex=Exception()
       ex.faultstring="Couldn't contact publisher webservice!"
       raise ex

   if verbose:
       print "***************************************************************************"
       print "********           TUPLES IN ONE GO TO INSERT:                     ********"
       print "***************************************************************************"
       print '"' + blockOfTuples + '"'
       print "***************************************************************************"
       print "len(tuples)        = " + str(len(tuples))
       print "len(blockOfTuples) = " + str(len(blockOfTuples))
       print "blockOfTuples      = " + blockOfTuples
       
   return p.gvInsertData(tableName, len(tuples), len(blockOfTuples), blockOfTuples)


def msg_translate_testdef(old):
    new={'metricType':'status'}
    for k,v in old.items():
        if k=='testname':
            new['serviceType'],new['metricName']=v.split('-',1)
        elif k=='datatype':
            new['dataType']=v
            new['metricType']='performance'
        elif k=='dataunit':
            new['dataUnit']=v
            new['metricType']='performance'
        elif k=='testabbr':
            new['metricAbbr']=v
        elif k=='testtitle':
            new['metricTitle']=v
        elif k=='testhelp':
            new['metricHelp']=v
        elif k!='serialized':
            new[k]=v
    return new
       
def msg_translate_testdata(old):
    new={'gatheredAt':os.environ['HOSTNAME']}
    serviceType=old['testname'].split('-')[0]
    for k,v in old.items():
        if k=='voname':
            new["voName"]=v
        elif k=='testname':
            new['serviceType'],new['metricName']=v.split('-',1)
        elif k=='nodename':
            new["serviceURI"]=serviceType.lower()+'://'+v
        elif k=='timestamp':
            new["timestamp"]=Probe.w3ctime(int(v))
        elif k=='status':
            new["metricStatus"]=Probe.statusMap[int(v)]
        elif k=='summarydata':
            new["summaryData"]=v
        elif k=='detaileddata':
            new["detailsData"]=v
        elif k=='envname':
            new["envName"]=v
    return new

def msg_translate_testenvvars(old):
    new={}
    for k,v in old.items():
        if k=='envname':
            new["UUID"]=v
        elif k!='serialized':
            new[k]=v
    return new

def msg_format_tuple(tuple):
    tail='EOT\n'
    body=''
    for k,v in tuple.items():
        # if detailsData attribute is empty standard allows not to publish it.
        if k == 'detailsData' and v == '':
            continue
        if '\n' in v:
            if v[-1]!='\n':
                v=v+'\n'
            tail="%s: EOT\n%sEOT\n"%(k,v)
        else:
           body+="%s: %s\n"%(k,v)
    return body+tail
 
def publish_tuples_msg(tableName, tuples):
    if tableName.lower() == 'testenvvars':
        print "\nNB! MSG publisher will skip publication of %s tuples." % tableName
        return
    messageClassMap={'testdef':('org.wlcg.metricDescription', msg_translate_testdef), 
                     'testdata':('org.wlcg.metricOutput', msg_translate_testdata), 
                     'testenvvars':('org.wlcg.metricEnvironment', msg_translate_testenvvars)}
    messageClass,translateFunction=messageClassMap[tableName.lower()]
    if verbose:
        print "\nExecuting: "+msgPublishCmd+" "+messageClass
    o,i=popen2.popen4(msgPublishCmd+" "+messageClass)
    if verbose:
        print "\nTuples:\n---BEGIN---"
    for tuple in tuples:
        s=msg_format_tuple(translateFunction(tuple))
        if verbose:
            print s
        i.write(s)
    if verbose:
        print "---END---"
    i.close()
    s=o.read()
    o.close()
    if s:
        print "Output from %s:"%msgPublishCmd
        print s
    
def publish_tuples(tableName, tuples, publishing_mode=['samws']):
    for mode in publishing_mode:
        {'samws':publish_tuples_samws, 
         'msg':publish_tuples_msg
         }[mode](tableName, tuples)
     
def main():
   global publisherWSDL
   global verbose
   
   try:
      opts, args = getopt.getopt(sys.argv[1:], "hvp:", ["help", "verbose"])
   except getopt.GetoptError:
      usage()
      sys.exit(2)

   verbose = False

   for o, a in opts:
       if o in ("-v", "--verbose"):
           verbose = True
       if o in ("-h", "--help"):
           usage()
           sys.exit()
       if o == "-p":
           publisherWSDL = a
   
   if len(args) == 0:
      usage()
      sys.exit(2)

   if verbose:
      print "Arguments passed: " + str(args)

   tableName=args[0]
   
   if not tableDefs.has_key(tableName):
      print " "
      print "'%s' is not a valid table name.\n"%tableName
      usage()
      sys.exit(2)
     
   tableDef=tableDefs[tableName]
   listOfTuples = []
   
   if(len(args) == 1):
      if verbose:
         print "Tuples will be passed through STDIN"
      listOfTuples = load_tuples(tableDef, '')
   else:
      if verbose:
         print "Passing file names as arguments: " + str(args[1:])
      for i in args[1:]:
         listOfTuples += load_tuples(tableDef, i)
   retcode=None
   try:
      retcode=publish_tuples(tableName, listOfTuples, publishingMode)
   except Exception, e:
      try:    
         print "Publishing failed: " + e.faultstring
      except:
         print "Publishing failed: " + str(e)
      sys.exit(1)
   if retcode:
       sys.exit(retcode)
        
# this only runs if the module was *not* imported
if __name__ == '__main__':
    # Retrieve publisherWSDL from config file.
    try:
       from same.Config import config
       if config:
          publisherWSDL=config.get('webservices', 'publisher_wsdl')
          if verbose:
             print "Read SAME_PUBLISHER_WSDL = " + publisherWSDL + " from SAME config file.\n"
          publishingMode=['samws']
          msgPublishCmd=config.get('msg','publish_cmd')
          try:
             os.environ['MSG_HOME']=config.get('msg','msg_home')
          except:
             try:
                os.environ['MSG_HOME']=msgPublishCmd[:msgPublishCmd.index('/bin/')]
             except ValueError:
                os.environ['MSG_HOME']=os.environ.get('SAME_HOME')
          publishingMode=config.get('msg','publishing_mode').split()
          publishingMode=os.environ.get('SAME_PUBLISHING_MODE', publishingMode).split()
    except:
       pass

    # Retrieve publisherWSDL from environment variable.
    if os.environ.get("SAME_PUBLISHER_WSDL"):
       publisherWSDL = os.environ.get("SAME_PUBLISHER_WSDL")

    if publisherWSDL:
        main()
else:
    # Retrieve publisherWSDL from config file.
    from same.Config import config

    if config:
       publisherWSDL=config.get('webservices', 'publisher_wsdl')

    # Retrieve publisherWSDL from environment variable.
    if os.environ.get("SAME_PUBLISHER_WSDL"):
       publisherWSDL = os.environ.get("SAME_PUBLISHER_WSDL")
       
